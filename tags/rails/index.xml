<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rails on iberianpigsty</title><link>https://iberianpig.github.io/tags/rails/</link><description>Recent content in Rails on iberianpigsty</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>Copyright (c) 2014 - 2016, iberianpigsty; all rights reserved.</copyright><lastBuildDate>Mon, 11 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://iberianpig.github.io/tags/rails/index.xml" rel="self" type="application/rss+xml"/><item><title>ソースコードを読む</title><link>https://iberianpig.github.io/posts/2016-07-11-%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%82%80/</link><pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate><guid>https://iberianpig.github.io/posts/2016-07-11-%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%82%80/</guid><description>エンジニアとなり、RubyやRailsのプログラムを読み書きするようになって2年経った。 ソースコードを読む時のワークフローについて考えてみた時に、他人がどのようにソースを読んでいるのが気になった。
どのようにソースを読み、どのように理解するのか、一般解を知る前にまずは自分の方法を整理してみることにした。
ソースを読むメリット 間違いがない APIドキュメントから漏れていること、内部仕様もわかったり StackOverFllowに惑わされない 結果的に迷う時間の短縮 必要なモノ 気合 根性 pry bundle open IDE、Ctagsが使えるエディタ(Emacs, Vim, etc) 定義元ジャンプができればOK 言語、フレームワークの公式リファレンス(http://devdocs.io) 武器の使いドコロ 気合 Googleへ逃げず、ソースを読むという決断をするのために必要
根性 ソースコードを読み始めたが、よくわからんと途中で調べる事をやめてGoogleにすぐ逃げてしまうことを避けるために必要
pry 調べたいコードを実行させ、binding.pryでブレークポイントを作る edit METHOD_NAMEがどこから呼ばれているのかを見る。
Rubyのコードは実行時でないと、正しい呼び出し元がわからない。
また、pryはコード・リーディングやデバッグに便利様々な機能を持っている
show-source METHOD_NAME でソースを読むこともできる ls OBJECT_NAMEでオブジェクトのクラスメソッド、インスタンスメソッドなどを確認できる IDEや、Ctagsが使えるエディタ(Emacs, Vim, etc) 定義元にエディタ上でジャンプする
これだけのためにIDE使うという人は多い pryのeditで飛んでそこからはエディタでタグジャンプしたりする Ctags コマンドラインツール エディタがメソッドの定義元を調べるための索引tagsを提供 tagsがある場合、vimはデフォルトでc-]押せば定義元にジャンプできる(タグジャンプ) 万能ではなく、ジャンプ先がたまに間違っていることも Gtags(GNU GLOBAL)をいじるともっと賢い索引が手に入るらしい vim使ってる場合は、rails-vimプラグインがRails用にタグ生成コマンドを提供している ファイルサイズが大きく、利用するか否かは個人の環境に依存するため、.gitignoreへtagsを追加しておくべき。 bundle open bundle open LIBRARRY_NAME ライブラリ内のソースの在処(ディレクトリ)を開く README.</description></item><item><title>mysqlで特定のテーブルのDumpをのみ取得する</title><link>https://iberianpig.github.io/posts/2015-09-01-mysql%E3%81%A7%E4%BB%96%E7%92%B0%E5%A2%83%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AEdump%E3%82%92%E3%81%A8%E3%81%A3%E3%81%A6%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%AB%E6%B5%81%E3%81%97%E8%BE%BC%E3%81%BF%E3%81%9F%E3%81%84/</link><pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate><guid>https://iberianpig.github.io/posts/2015-09-01-mysql%E3%81%A7%E4%BB%96%E7%92%B0%E5%A2%83%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AEdump%E3%82%92%E3%81%A8%E3%81%A3%E3%81%A6%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%AB%E6%B5%81%E3%81%97%E8%BE%BC%E3%81%BF%E3%81%9F%E3%81%84/</guid><description> 必要となった背景 1つのコンテンツに対してそのコンテンツに含まれる複数のカテゴリの組み合わせを元におすすめのコンテンツを表示する。
動的に表示させようとしたが、現行のままでは動的に出すのは厳しく、バッチ処理でおすすめコンテンツの情報をキャッシュすることにした。
本番環境の裏側で実行させようと考えたが、非常に遅く、1ヶ月ほど時間がかかってしまうため、 一度本番のDumpを取得した上で別の環境でバッチを回し、その結果を本番環境へロードさせたほうが良いということになった。
テーブル別のDump いつもDB一括でMySQL workbenchでDumpを取得しているなど、mysqlコマンドに疎い。 今回は他のテーブルは必要なかったので、必要なテーブルのDumpのみを取得する方法を調べた。
下記コマンドでDumpを取得する。複数テーブルの場合は続けてテーブル名を入力すればよい。 また、今回の本番環境、隔離環境はRailsを利用しており、migrationにて既にテーブルが作成されている。
そのため-tオプションにてCREATE TABLE文をスキップさせる
mysqldump -u &amp;lt;USERNAME&amp;gt; -p -t &amp;lt;DBNAME&amp;gt; &amp;lt;TABLENAME1&amp;gt; [ &amp;lt;TABLENAME2&amp;gt; ... ] &amp;gt; &amp;lt;DUMPFILENAME&amp;gt;.sql Dumpのインポート 下記コマンドでインポート
mysqll -u &amp;lt;USERNAME&amp;gt; -p &amp;lt;DBNAME&amp;gt; &amp;lt; &amp;lt;DUMPFILENAME&amp;gt;.sql seed_fuで入れる場合 mbleigh/seed-fu という主に環境整備時に利用するものGemがある。
テストデータやシードデータの導入の利用される。
自分は実データをMySQLからdumpしてseed_fu用のfixtureを生成するRakeタスクを作成しており、ユースケースによってはこちらを利用する。
db:dump_seed_fu[model]で実行。 db:seed_fuで使えるseedデータがdb/fixtures内に生成される。
Special Thanks MySQL で特定のテーブルのみをバックアップ - Easy Ramble mbleigh/seed-fu</description></item><item><title>Rspecでインスタンス変数が参照できない</title><link>https://iberianpig.github.io/posts/2014-09-11-rspec%E3%81%A7%E3%81%AA%E3%81%9C%E3%81%8B%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%E3%81%8C%E5%8F%82%E7%85%A7%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%99%82/</link><pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate><guid>https://iberianpig.github.io/posts/2014-09-11-rspec%E3%81%A7%E3%81%AA%E3%81%9C%E3%81%8B%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%E3%81%8C%E5%8F%82%E7%85%A7%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%99%82/</guid><description>Rspecの世界からController内メソッドでインスタンス変数@hogeを利用した場合は、 直接Rspecからインスタンス化された@hogeは別物である。
まず、この事実を理解すべきだった。
Controllerの中の値をテストする Rspec側からRailsのController側でインスタンス化された値を評価する場合はassigns(:hoge)で参照するとよい。
また、RspecからDBアクセスして取り出す方法もあるのでこちらも忘れずに。
expect(Model.last.name).to eq &#39;modelname&#39;で評価する。
どちらもどのような値がアサインされていればよいのかを意識してテストを書く。
その他 itブロック・contextブロック・describeブロックの中で定義した変数のスコープはその中に限る。
そのため、スコープを飛び越えて同じ値を扱うためにはインスタンス変数を利用する必要がある。
はじめてのテストということでハマってしまった。
テストではRailsの世界の変数か、Rspecの世界の変数なのかを明確に意識する必要があった。
実行中のプログラム内なのか、その外なのかを常に意識する。
RequestヘッダをRspecで作ってそれをRailsに投げる。
Railsの中のController内で、どのような値がアサインされるかテストする。
どの世界の値を取得して何と比べるのか。
何をテストすべきかを意識していれば回避できる問題。</description></item><item><title>Head-First-Rails_5</title><link>https://iberianpig.github.io/posts/2014-03-17-head-first-rails_5/</link><pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate><guid>https://iberianpig.github.io/posts/2014-03-17-head-first-rails_5/</guid><description>Head First Rails 第5章のメモ ※ rails3の書籍をrails4で読み替えてチュートリアルを進めています。
scaffold で生成したアプリケーションのフォームに バリデーションを設定していく。
##バリデーションの設定。
バリデーションの設定はモデル名．rbの中に設定する validates_xxxxxx_of と記述する。
エラー処理を自分で書く場合 scaffoldを利用していない場合にエラー処理を自分で記述する必要がある。
画面に処理内容を表示するためにはSaveメソッドでの失敗をコントローラに伝える必要がある。
そのため、 if文で@model.saveを実行した結果 true or false に応じて、リダイレクトを 行うか否かを決定する。
form内で、f.error_messagesメソッドを利用する。
updateも同様。if文で@model.update_attributes(:params[:model])の実行し、結果に応じて リダイレクトを行うか否かを決める。
不明点 バリデーターのメッセージを変更方法 書籍内のvalidates_presence_of :trainer, &amp;quot;What&#39;s your name?&amp;quot;がうまく動かない</description></item><item><title>Head-First-Rails_4</title><link>https://iberianpig.github.io/posts/2014-03-15-head-first-rails_4/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://iberianpig.github.io/posts/2014-03-15-head-first-rails_4/</guid><description>Head First Rails第4章のメモ ※ rails3の書籍をrails4で読み替えてチュートリアルを進めています。
Scaffoldで作成したページを改造していく。
検索窓の導入 どのページにも検索窓を用意するので、layoutsを利用する layoutfileは｛モデル名｝.html.erbとなる
form_forとform_tagの違い
ハマったところ 書籍では&amp;lt;% %&amp;gt;だったが、実際はform_tagは &amp;lt;%= %&amp;gt; で囲む必要があった
(rails 3とrails 4の違い？　)
routesの追記が必要。 formの追加に合わせて post &#39;client_workouts/find&#39; =&amp;gt; &#39;client_workouts#find&#39; rails4だとFindで :conditionsが使えない 代わりにモデル名.whereを利用する
* モデル名.find(id) - findはidの検索専用 * モデル名.where(:カラム名 =&amp;gt; 内容) - なんか指定するときは大体where
defaultで生成されるapplication.html.erbはいつ利用される？ いつも使われてて、マスタのテンプレートとして使われてる どのViewもコントローラのメソッド（アクション）と紐づくViewが中にサンドイッチされて出力されてる。</description></item></channel></rss>