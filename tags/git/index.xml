<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on iberianpigsty</title>
    <link>https://iberianpig.github.io/tags/git/</link>
    <description>Recent content in git on iberianpigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (c) iberianpigsty; all rights reserved.</copyright>
    <lastBuildDate>Tue, 30 Apr 2019 23:57:45 +0900</lastBuildDate><atom:link href="https://iberianpig.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>tig-explorer.vimの使い方</title>
      <link>https://iberianpig.github.io/posts/2019-04-30_how-to-use-tig-explorer.vim/</link>
      <pubDate>Tue, 30 Apr 2019 23:57:45 +0900</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2019-04-30_how-to-use-tig-explorer.vim/</guid>
      <description>Vim用のGitクライアントが欲しかった vimのGitプラグインとして何を使っているのが多いだろうか？
自分の観測範囲ではfugitiveを使っている人が多いようだ。
しかし、ターミナルではCUIツールで高速なプレビューの出来るtigをGitクライアントとして利用している人は多いのではないだろうか。
 vimでもtigが使いたい。そんな人(自分)のためにvim pluginを作成した。
tig-explorer.vim  tig-explorer.vimはtigをvimから扱うプラグイン。
tigの機能でdiff上からeキーを押下すると任意のエディタで該当箇所を開く事が出来るが、このプラグインを使うと、vimからtigを呼び出すことが出来る。

tigを開き、差分をチェックして、そこから再びvimで開くことが出来る。
また、vimからtigを呼び出すには!tigコマンドをvimのコマンドモードから呼び出すことでも同じことが実現でも可能だが、 プロセスがvim-tig-vim-tig-vimのようにどんどんネストしてしまう。
このプラグインを経由してエディタで開く場合は親のvimプロセスで開くため、vim上のbuffer移動やhistory、yankが途切れることがない。
また、vimからtigに行番号やファイル名を渡せるので、↓のコマンドが格段に扱いやすくなる。
  tig FILEPATHで閲覧中のファイルの履歴を見る(:TigOpenCurrentFile)
  tig grep PATTERN PATHでプレビューしてから開く(:TigGrep)
  tig blame FILEPATHで現在のファイル履歴を行単位で見る(:TigBlame)
  tig-explorer.vimのカスタマイズ .vimrcの記述例
&amp;#34; tigを開くnnoremap &amp;lt;Leader&amp;gt;t :TigOpenProjectRootDir&amp;lt;CR&amp;gt;&amp;#34; 現在のファイルの履歴を見るnnoremap &amp;lt;Leader&amp;gt;T :TigOpenCurrentFile&amp;lt;CR&amp;gt;&amp;#34; パターンでtig grepするnnoremap &amp;lt;Leader&amp;gt;g :TigGrep&amp;lt;CR&amp;gt;&amp;#34; tig grepした内容を再呼び出しするnnoremap &amp;lt;Leader&amp;gt;r :TigGrepResume&amp;lt;CR&amp;gt;&amp;#34; 選択中のキーワードでtig grepするvnoremap &amp;lt;Leader&amp;gt;g y:TigGrep&amp;lt;Space&amp;gt;&amp;lt;C-R&amp;gt;&amp;#34;&amp;lt;CR&amp;gt;&amp;#34; カーソル下のキーワードでtig grepするnnoremap &amp;lt;Leader&amp;gt;cg :&amp;lt;C-u&amp;gt;:TigGrep&amp;lt;Space&amp;gt;&amp;lt;C-R&amp;gt;&amp;lt;C-W&amp;gt;&amp;lt;CR&amp;gt;&amp;#34; 現在のカーソル位置でtig blameするnnoremap &amp;lt;Leader&amp;gt;b :TigBlame&amp;lt;CR&amp;gt;また、このプラグインの特徴的なところでtig上でCtrl-tを押下するとvimのタブで開く機能が追加されている。 同様にCtrl-sで水平分割、 Ctrl-vで垂直分割出来る。

tig上のvimを開くキーバインドの動的に追加していて、下記がデフォルトの設定値。
let g:tig_explorer_keymap_edit = &amp;#39;&amp;lt;C-o&amp;gt;&amp;#39;let g:tig_explorer_keymap_tabedit = &amp;#39;&amp;lt;C-t&amp;gt;&amp;#39;let g:tig_explorer_keymap_split = &amp;#39;&amp;lt;C-s&amp;gt;&amp;#39;let g:tig_explorer_keymap_vsplit = &amp;#39;&amp;lt;C-v&amp;gt;&amp;#39;↑ .</description>
    </item>
    
    <item>
      <title>ranger-explorer.vimをアップデートした</title>
      <link>https://iberianpig.github.io/posts/2018-09-02_make_ranger-explorer.vim/</link>
      <pubDate>Sun, 02 Sep 2018 00:05:21 +0900</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2018-09-02_make_ranger-explorer.vim/</guid>
      <description>ranger-explorer.vimというVimプラグインをアップデートした。
このアップデートでranger上の操作でVimのタブで開くか画面分割して開くかを選択できるようにした。
(あとNeovimもサポートした)
ranger-explorer.vim https://github.com/iberianpig/ranger-explorer.vim
Vimのファイラのrangerに置き換えるVimプラグイン。 Vimからrangerでカレントディレクトリを開いたり、プロジェクトルートのディレクトリを開いたりできる。 また、Vimのプロセスがネストせず、rangerの親プロセスのVimで開くようにしているのでbufferを共有することが出来る。(これが!rangerで開いた時との違い)
今回のアップデートでは rangerから Vimのタブや画面分割で開いたり出来るようにしている。
ranger rangerはCLIベースの高機能ファイラで、コマンドラインから操作できる。 hjklの移動、yyのヤンク、ddのカット、pのペーストなどVimライクな操作や、コマンドラインでの:rename、:touchなどの操作がサポートされている。
特に高速なライブプレビューが気に入っており、これだけでrangerを選択するモチベーションになっている。
rangerからタブ/画面分割で開く ranger-explorerからrangerを開いた時、Vimを開くキーバインドがrangerに自動で定義されるようにした。
&amp;lt;Ctrl-o&amp;gt;: 現在のタブ上で開く &amp;lt;Ctrl-t&amp;gt;: 新しいタブで開く &amp;lt;Ctrl-v&amp;gt;: 画面を垂直に分割して開く &amp;lt;Ctrl-s&amp;gt;: 画面を水平に分割して開く このようにrangerから分割して開くことが出来る。 動的にrangerへキーバインドを注入しているので、CLIからrangerを開いた時はこれらのキーバインドは使えず、ranger-explorerから開いた時のみタブや画面分割が出来るようになる。
また、動的にアサインするキーバインドは ~/.vimrc で下記のように上書きできる。
let g:ranger_explorer_keymap_edit = &amp;#39;&amp;lt;C-o&amp;gt;&amp;#39;let g:ranger_explorer_keymap_tabedit = &amp;#39;&amp;lt;C-t&amp;gt;&amp;#39;let g:ranger_explorer_keymap_split = &amp;#39;&amp;lt;C-s&amp;gt;&amp;#39;let g:ranger_explorer_keymap_vsplit = &amp;#39;&amp;lt;C-v&amp;gt;&amp;#39;得意なツールに任せる 無理に全てVimプラグインで頑張るよりも得意なツールを使えば良いと考えていて、 今回の場合はディレクトリ構造を扱うのが適したツールのrangerに任せている。
特にファイルを開いたり、検索する部分は外部のCLIツールを利用している。
 fzf.vim  ファイル名をあいまい検索(fuzzy-finder)   ranger-explorer.vim  ディレクトリ階層からファイルを選択   tig-explorer.vim  tigでGitの履歴から、git grepからファイルを開く    どれもプレビューが高速なツールなのでVimからファイルを探すワークフローが快適になった。
異なるツールの操作に一貫性を持たせる Vimに外部ツールを利用する場合はパフォーマンスの利点もあるが、普段から使い慣れているツールを扱えるということが利点。 しかし、当然ながらツール毎に細かいキーバインドが異なる。同じ機能は同じキーバインドで扱えるようにしたいと思っていた。
そこで、fzfや以前愛用していたvimfiler/ctrlpと同様の使い勝手が欲しくて、&amp;lt;C-o&amp;gt;、&amp;lt;C-t&amp;gt;、&amp;lt;C-v&amp;gt;、&amp;lt;C-s&amp;gt;のキーバインドでタブや画面分割して開けるようにした。
プラグイン側からキーバインドを動的に設定するアイデアは、tig-explorerにも取り込んでいる。</description>
    </item>
    
    <item>
      <title>tigの使い方とオプションをまとめた</title>
      <link>https://iberianpig.github.io/posts/2016-04-22-tig%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2016-04-22-tig%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>&lt;p&gt;CUIなGitクライアント。&lt;br&gt;
普段使いのツールだが、社内勉強会の際に改めて調べた。&lt;br&gt;
色々と便利なオプションがあった。&lt;/p&gt;
&lt;h1 id=&#34;tigの特徴&#34;&gt;tigの特徴&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Gitクライアント&lt;/li&gt;
&lt;li&gt;CUI&lt;/li&gt;
&lt;li&gt;マルチプラットフォーム&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tigのいいところ&#34;&gt;tigのいいところ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;軽い&lt;/li&gt;
&lt;li&gt;インストールさえされていればX動いてなくても使える&lt;/li&gt;
&lt;li&gt;ログのツリー見て、diff見て、編集のワークフローが快適&lt;/li&gt;
&lt;li&gt;vim likeに使える&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;インストール&#34;&gt;インストール&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Linux/Windowsの人(apt使えるなら)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install tig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Macとか
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brew install tig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;基本的な使い方&#34;&gt;基本的な使い方&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ターミナルで&lt;code&gt;tig&lt;/code&gt;とタイプで起動&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;押せばヘルプ出る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt;で閉じる&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>自動でコミットメッセージの先頭にIssueIDを付与するGithookの作り方</title>
      <link>https://iberianpig.github.io/posts/2015-08-18-issueid_xxxx%E3%81%AA%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E5%90%8D%E3%81%AE%E6%99%82%E3%81%AB%E8%87%AA%E5%8B%95%E3%81%A7%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E5%85%88%E9%A0%AD%E3%81%ABissueid%E3%82%92%E4%BB%98%E4%B8%8E%E3%81%99%E3%82%8Bruby%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2015-08-18-issueid_xxxx%E3%81%AA%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E5%90%8D%E3%81%AE%E6%99%82%E3%81%AB%E8%87%AA%E5%8B%95%E3%81%A7%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E5%85%88%E9%A0%AD%E3%81%ABissueid%E3%82%92%E4%BB%98%E4%B8%8E%E3%81%99%E3%82%8Bruby%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid>
      <description>&lt;p&gt;なぜこんなことがやりたいかというと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スクラムでのタスク管理にPivotalTracker(&lt;a href=&#34;http://www.pivotaltracker.com&#34;&gt;http://www.pivotaltracker.com&lt;/a&gt;)を利用していて、ストーリーと呼ばれるチケットにはIDが付与される&lt;/li&gt;
&lt;li&gt;Githubと連携することができ、[#IDの番号]としてコミットメッセージを入れてPushすると、PivotalTrackerのコメント欄にGithubのリンクが自動で挿入される&lt;/li&gt;
&lt;li&gt;あとからコミットログを追うときにコミットメッセージにIDが入っていると該当のチケットを検索できる&lt;/li&gt;
&lt;li&gt;毎回IDを入れるのがめんどくさい、たまに忘れる&lt;/li&gt;
&lt;li&gt;チームで浸透させたい&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
