<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on iberianpigsty</title>
    <link>https://iberianpig.github.io/categories/android/</link>
    <description>Recent content in Android on iberianpigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (c) 2014 - 2016, iberianpigsty; all rights reserved.</copyright>
    <lastBuildDate>Thu, 14 Aug 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://iberianpig.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Androidでのデータの保存</title>
      <link>https://iberianpig.github.io/posts/2014-08-14-sharedpreferences/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2014-08-14-sharedpreferences/</guid>
      <description>

&lt;h1 id=&#34;データの保存:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;データの保存&lt;/h1&gt;

&lt;h2 id=&#34;sharedpreferenceの利用:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;SharedPreferenceの利用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Androidアプリでデータを保存する方法のひとつ
データをキーと値の組み合わせで保存
ファイルなどに保存するよりも非常に簡単にデータを保存可能&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ただし大規模なデータには向かず、設定項目向き。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;使い方:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;使い方&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;SharedPreferences はgetSharedPreferences(String name, int mode);
でを取得。
&lt;code&gt;name&lt;/code&gt; は &lt;code&gt;Preference&lt;/code&gt; 自体の名前指定
mode には
&lt;code&gt;Activity.MODE_PRIVATE&lt;/code&gt;
&lt;code&gt;Activity.MODE_WORLD_READABLE&lt;/code&gt;
&lt;code&gt;Activity.MODE_WORLD_WRITEABLE&lt;/code&gt;
などを指定&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;モードについては後述。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SharedPreferences pref = getSharedPreferences(PREF_NAME, MODE_PRIVATE);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SharedPreferencesのインスタンスをgetSharedPreferencesで取得し、
editメソッドでEditorクラスのインスタンスを呼び出す。
そのEditorクラスにputXxxxメソッドを使って値を対応させる
最後にcommitメソッドで格納する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// プリファレンスに保存
Editor editor = pref.edit();
editor.putString(KEY_TEXT, s);  // KEY, VALUEの組み合わせで保存
editor.commit();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;保存される場所:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;保存される場所&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;保存された Preference は data/data/パッケージ名/shared_prefs
の中に xmlファイルとして保存される&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;データの取得:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;データの取得&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;getXxxx(String key, Xxxx defValue)&lt;/code&gt;のkey, value形式で取得する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;getString(String key, String defValue);
getInt(String key, int defValue);
getLong(String key, long defValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;データ型:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;データ型&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;下記のデータ型がXMLに保存される
1. boolean
2. float
3. int
4. long
5. String&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;※ データの大きい物、objectの保管は非推奨。(シリアライズさせれば出来るはず)&lt;br /&gt;
それらはバイナリ化してDBへ、もしくはファイルとして保存させるべき。&lt;/p&gt;

&lt;h3 id=&#34;mode種別:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;MODE種別&lt;/h3&gt;

&lt;p&gt;プリファレンスでは、MODE_APPENDを除いた３種類のオペレーションモードが指定可能&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MODE_PRIVATE&lt;/td&gt;
&lt;td&gt;作成したアプリのみ読み書きできる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MODE_WORLD_READABLE&lt;/td&gt;
&lt;td&gt;他アプリに読み込み権を与える&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MODE_WORLD_WRITEABLE&lt;/td&gt;
&lt;td&gt;他アプリに書き込み権を与える&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;どのタイミングで使用すべきか:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;どのタイミングで使用すべきか&lt;/h3&gt;

&lt;p&gt;実際は下記が一般的とのこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;書き込み

&lt;ul&gt;
&lt;li&gt;onStop()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;読み込み

&lt;ul&gt;
&lt;li&gt;onResume()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/iberianpig/a25ce9e12795cdd40dd1/revisions&#34;&gt; サンプルコード &lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ファイル入出力:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;ファイル入出力&lt;/h2&gt;

&lt;p&gt;openFileOutput, openFileInputを利用してローカルファイルへ保存。
android.content.Contextのファイル書き込み/読み込み系のメソッドを利用。&lt;/p&gt;

&lt;p&gt;###ファイル入出力メソッド&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メソッド名&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;openFileInput(String name)&lt;/td&gt;
&lt;td&gt;ローカルファイルの読み込み&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;openFileOutput (String name, int mode)&lt;/td&gt;
&lt;td&gt;ローカルファイルへの書き込み&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;deleteFile(String name)&lt;/td&gt;
&lt;td&gt;ローカルファイルの削除&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;abstract String[] fileList()&lt;/td&gt;
&lt;td&gt;該当アプリが作成したローカルファイルのリストを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;モード種別:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;モード種別&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MODE_APPEND&lt;/td&gt;
&lt;td&gt;既にファイルがあった場合、追記で開く&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MODE_PRIVATE&lt;/td&gt;
&lt;td&gt;他のアプリからアクセスできないprivate fileとして生成&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MODE_WORLD_READABLE&lt;/td&gt;
&lt;td&gt;他のアプリへ読み込み権限を与える&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MODE_WORLD_WRITEABLE&lt;/td&gt;
&lt;td&gt;他のアプリへ書き込み権限を与える&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://techbooster.org/tag/openfileoutput/&#34;&gt;http://techbooster.org/tag/openfileoutput/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;書き込みの例:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;書き込みの例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OutputStream out;
//OutputStream インスタンス作成
try {
  out = openFileOutput(&amp;quot;log.txt&amp;quot;, MODE_PRIVATE);
  // 出力ファイルをlog.txt, 権限をPRIVATE、このアプリでのみ利用可能とする
  PrintWriter writer = new PrintWriter(
    new OutputStreamWriter(out, &amp;quot;UTF-8&amp;quot;));
  // Outputstreamインスタンスとエンコーディングの設定
  EditText edit = (EditText)findViewById(R.id.edit_data);
  writer.append(edit.getText().toString());
  //editTextの内容をファイルに書き込む
  writer.close();
}catch...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;読み込みの例:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;読み込みの例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    InputStream in;
    //InputStream インスタンス作成
    String lineBuffer;
    try {
      in = openFileInput(&amp;quot;log.txt&amp;quot;);
      BufferedReader reader = new BufferedReader(
        new InputStreamReader(in, &amp;quot;UTF-8&amp;quot;));
      while((lineBuffer = reader.readLine()) != null) {
        Log.v(&amp;quot;TEST&amp;quot;, lineBuffer);
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/iberianpig/007b96e935dd607311ae/revisions&#34;&gt; サンプルコード &lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dbへの保存-書きかけ:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;DBへの保存(書きかけ)&lt;/h2&gt;

&lt;h2 id=&#34;special-thanks:51d0cd193e9177c2e1f2a3f5a71c87a9&#34;&gt;Special Thanks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://weide-dev.blogspot.jp/2010/09/sharedpreferences.html&#34;&gt;http://weide-dev.blogspot.jp/2010/09/sharedpreferences.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://androlab.blogspot.jp/2011/01/blog-post_20.html&#34;&gt;http://androlab.blogspot.jp/2011/01/blog-post_20.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://techbooster.org/tag/openfileoutput/&#34;&gt;http://techbooster.org/tag/openfileoutput/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ListView and http connection</title>
      <link>https://iberianpig.github.io/posts/2014-08-22-listview-and-http-connection/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2014-08-22-listview-and-http-connection/</guid>
      <description>

&lt;h1 id=&#34;雑多メモ:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;雑多メモ&lt;/h1&gt;

&lt;p&gt;Railsで作ったサーバとHttpでCRUDなおしゃべりをするアプリを作った時に調べたメモ達&lt;/p&gt;

&lt;h2 id=&#34;レイアウトをjava側で生成する:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;レイアウトをJava側で生成する&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    LinearLayout linearLayout = new LinearLayout(this);
    linearLayout.setOrientation(LinearLayout.VERTICAL);
    setContentView(linearLayout);`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;レイアウトに要素を追加する:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;レイアウトに要素を追加する&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;   Button button1 = new Button(this);
    button1.setText(&amp;quot;OK&amp;quot;);
    button1.setLayoutParams(new LinearLayout.LayoutParams(
        LinerLayout.LayoutParams.MATCH_PARENT,
        LinerLayout.LayoutParams.WRAP_CONTENT));
    linearLayout.addView(button1);`
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;addviewメソッド:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;AddViewメソッド&lt;/h3&gt;

&lt;p&gt;「LinearLayout」クラスの親クラスである「ViewGroup」クラスで用意されている「addView」メソッドを使います。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;public void addView(View child, LayoutParams params)
Adds a child view with the specified layout parameters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Parameters:
  child:  the child view to add
  params:  the layout parameters to set on the child&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;LinearLayout.LayoutParamsクラス&lt;/p&gt;

&lt;p&gt;「android.widget.LinearLayout.LayoutParams」クラスは「android.view.ViewGroup.LayoutParams」クラスのサブクラスです。コンストラクタの1つのは次のようになっています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;LayoutParams
public LinearLayout.LayoutParams(int w, int h)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;他のビューに対する相対位置の指定-addrule:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;他のビューに対する相対位置の指定(addRule)&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;このビュー自身のサイズに関する設定の他に、別に追加されたビューに対する位置関係を設定することが出来ます。「RelativeLayout.LayoutParams」クラスで用意されている「addRule」メソッドを使います。
(参考:　&lt;a href=&#34;http://www.javadrive.jp/android/relativelayout/index3.html&#34;&gt;http://www.javadrive.jp/android/relativelayout/index3.html&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;addRule
public void addRule(int verb, int anchor)
Adds a layout rule to be interpreted by the RelativeLayout. Use this for
verbs that take a target, such as a sibling (ALIGN_RIGHT) or a boolean
value (VISIBLE).&lt;/p&gt;

&lt;p&gt;Parameters:
  verb  One of the verbs defined by RelativeLayout, such as
    ALIGN_WITH_PARENT_LEFT.
  anchor  The id of another view to use as an anchor, or a boolean
    value(represented as TRUE) for true or 0 for false). For verbs that
    don&amp;rsquo;t refer to another sibling (for example, ALIGN_WITH_PARENT_BOTTOM)
    just use -1.&lt;/p&gt;

&lt;h3 id=&#34;windowのタイトルを消す:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;Windowのタイトルを消す&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;onCreate内に下記を記述

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requestWindowFeature(Window.FEATURE_NO_TITLE);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;listviewの扱い方:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;ListViewの扱い方&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;String&amp;gt; items = new ArrayList&amp;lt;String&amp;gt;();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ListViewに値を追加する場合はArrayAdapterを用いる&lt;/li&gt;
&lt;li&gt;独自クラスのリストを扱う場合は下記が必要

&lt;ul&gt;
&lt;li&gt;独自クラスの作成(id, name, url, 画像等)&lt;/li&gt;
&lt;li&gt;XMLレイアウトを作成(独自クラスが収まるようなレイアウト)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ListViewに追加するArrayAdapter&lt;class&gt;(context, layout)
&lt;code&gt;ArrayAdapter&amp;lt;String&amp;gt; adapter = new ArrayAdapter&amp;lt;String&amp;gt;(this, android.R.layout.simple_list_item_1);&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アイテムの追加&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;adapter.add(&amp;quot;red&amp;quot;);
adapter.add(&amp;quot;green&amp;quot;);
adapter.add(&amp;quot;blue&amp;quot;);
ListView listView = (ListView) findViewById(id.listview);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;リストビューのアイテムがクリックされた時に呼び出されるコールバックリスナーを登録

&lt;ul&gt;
&lt;li&gt;listview.getItemAtPosition(position)でリスト上のオブジェクトを取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;``java
 listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
     @Override
     public void onItemClick(AdapterView&amp;lt;?&amp;gt; parent, View view,
             int position, long id) {
         ListView listView = (ListView) parent;
         String item = (String) listView.getItemAtPosition(position);
         Toast.makeText(ListViewSampleActivity.this, item, Toast.LENGTH_LONG).show();
     }
 });&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
## Threadの扱い
* 基本的にMainでUIを担当する
* サブThread上でUI描画を実行するとエラーとなってしまうので要注意
* Handler クラスを宣言し、描画Thred内でhandler.postすることでMainに描画部分を引き渡せる(http://www.adamrocker.com/blog/255/hello-android-chapter7-the-connected-world.html)
* ↑の処理をラップしているrunOnUiThreadメソッドが便利そう。(http://visible-true.blogspot.jp/2011/11/activityrunonuithreadrunnable.html)


## Http通信を行う場合
* インターネット接続を許可する為に、AndroidManifest.xmlに以下を
* 記述する。
`&amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot;&amp;gt;&amp;lt;/uses-permissio&amp;gt;`
* メインスレッドで通信を行った場合、Android4では&amp;quot;android.os.StrictMode$AndroidBlockGuardPolicy.onNetwork&amp;quot;エラーが発生し動作しない。
    * Android4ではメインスレッドからネットワークにアクセスする処理を実行することができなくなったため。
    * HTTPでdataを取得する場合はサブスレッドで取得する必要がある

## 非同期タスク(AsyncTask)
AsyncTask(Android独自のクラス)をextendsして、サブスレッドとメインスレッドを分けて動作させる。View操作とロジック計算を分離させる

* doInBackgroundメソッド
    * subスレッドとして動作
    * 非同期のHttpリクエストを実装とか
* onPostExecuteメソッド
    * doInBackground終了時に呼ばれる
    * mainスレッドとして実行する。
    * UI更新内容を実装したりとか。
* 参考URL
    * (http://www.ipentec.com/document/document.aspx?page=android-get-html-file-use-http-for-android4)
    * (http://www.office-matsunaga.biz/android/description.php?id=9)

## レイアウトの取得・差し替え(inflater)

&amp;gt; Androidのプログラミングでは、画面のViewを構成する場合、layout用xmlファイルを用いて、レイアウトを作成することが推奨されている。
&amp;gt; しかし、xmlファイルを用いた場合、それは、静的にレイアウトが決定付けられてしまい、プログラムの実行時にレイアウトを変形することはできない。
&amp;gt; この不都合を回避するため、LayoutInflater Classが用意されており、このクラスを活用することにより、実行時にお好みのレイアウトに変形できる。
(https://sites.google.com/site/androyerjapan/home/layoutinflater)

* inflaterによりxmlレイアウトの差し替えを行うことができる
* inflaterの取得方法は3種類ある
    * コンテキストから取得
    `LayoutInflater inflater1 = LayoutInflater.from(this);`
    * アクティビティから取得
    `LayoutInflater inflater2 = getLayoutInflater();`
    * システムサービスから取得
    ` LayoutInflater inflater3 = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);`

  上3つとも動きは一緒らしい

* 差し替えの方法(レイアウトXMLから取得したビューを画面に反映させる)

1. レイアウトインフレーターを取得
  `LayoutInflater inflater1 = LayoutInflater.from(this);`
 
2. レイアウトXMLからビューを取得
`View view = inflater.inflate(R.layout.main, null);`
 
3. ビューを画面に反映
`setContentView(view);`

&amp;gt; 最後のビューを画面に反映する処理は、リソースIDを指定する setContentView(R.layout.main) と同じ結果になります。

(参考サイト: http://inujirushi123.blog.fc2.com/blog-entry-27.html) 



* convertView
```java
// convertViewは使い回しされている可能性があるのでnullの時だけ新しく作る
if (null == convertView) {
    convertView = layoutInflater_.inflate(R.layout.hoge_layout, null);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記の説明を読んで少しハラオチした。
&lt;a href=&#34;http://hyoromo.hatenablog.com/entry/20090912/1252777077&#34;&gt;http://hyoromo.hatenablog.com/entry/20090912/1252777077&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;convertView自体はListViewをScrollした時のList一行生成時に呼ばれるgetViewに必要。
getView自体はAdapterクラスだと持ってるコールバック。&lt;/p&gt;

&lt;p&gt;一度でもgetViewを行ってさえいれば、AdapterクラスのインスタンスはconvertViewのプロパティ
を保持しており、それを毎回getViewに代入する。&lt;/p&gt;

&lt;p&gt;そのため、もし持っていなかったらLayoutInflaterで新しくconvertView取ってくるよという動きをする&lt;/p&gt;

&lt;h2 id=&#34;その他-不明点:ca8b5a9520e22fcfb65e09ec054cbe42&#34;&gt;その他/不明点&lt;/h2&gt;

&lt;p&gt;見てたサイト達
&lt;a href=&#34;http://www.one-tab.com/page/0QqPosDYSompC8jtQAdzMA&#34;&gt;http://www.one-tab.com/page/0QqPosDYSompC8jtQAdzMA&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>send data on Intent to call activity</title>
      <link>https://iberianpig.github.io/posts/2014-07-23-send-data-on-intent-to-call-activity/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2014-07-23-send-data-on-intent-to-call-activity/</guid>
      <description>

&lt;p&gt;#Activityとは&lt;/p&gt;

&lt;h2 id=&#34;androidの画面単位の概念:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;Androidの画面単位の概念&lt;/h2&gt;

&lt;p&gt;一つのアクティビティに対してクラス一つが割り当てされる&lt;br /&gt;
  &amp;ndash;&amp;gt;1つのXML(Viewテンプレート)と1つのJavaクラス(Activity)が必要となる&lt;/p&gt;

&lt;p&gt;#Intentとは&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;インテントというのは簡単に言えばアクティビティなどが他のアクティビティやアプリケーションなどと情報のやり取りを行うための箱のようなものです。インテントという箱には、相手先や届けたい情報などが含まれています。&lt;/p&gt;

&lt;p&gt;アクティビティから他の指定したアクティビティへインテントを送ることがあります。例えば他の画面を表示したい場合などです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(参考:　&lt;a href=&#34;http://www.javadrive.jp/android/intent/index1.html&#34;&gt;http://www.javadrive.jp/android/intent/index1.html&lt;/a&gt;)&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;##暗黙的インテントと明示的インテント&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;どの機能を呼び出すかをあらかじめ指定して直接それを起動することを「明示的インテント」(explicit intent)、何をしたいかは明示せずに漠然とそのデータに対して実行できる機能の一覧を要求することを「暗黙的インテント」(implicit intent)という。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(参考: &lt;a href=&#34;http://e-words.jp/w/E382A4E383B3E38386E383B3E38388.html&#34;&gt;http://e-words.jp/w/E382A4E383B3E38386E383B3E38388.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;##どうやって起動するのか&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;インテント&lt;/strong&gt;の&lt;strong&gt;アクション&lt;/strong&gt;とは、あるオブジェクトが他のオブジェクトを起動する際に、何をしたいのかを指すための指定です。ここでいうオブジェクトはActivityやサービスのことを指します。&lt;/p&gt;

&lt;p&gt;アクションを指定するには、Intentクラスのコンストラクタで指定するか、もしくはIntentクラスのsetActionメソッドを使って指定します。### また、指定するアクションはすべてIntentクラスの遷移元への値の渡し方と受け取り方定数として定義されていますので、該当な定数を使ってアクションを以下のように指定します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;``` java activity.java&lt;/p&gt;

&lt;p&gt;// アクションを指定してインテントのインスタンス生成
Intent intent = new Intent(Intent.ACTION_MAIN);&lt;/p&gt;

&lt;p&gt;// 次画面のアクティビティ起動
startActivity(intent);
```&lt;/p&gt;

&lt;p&gt;インテントを&lt;strong&gt;new Intent&lt;/strong&gt;してそれを&lt;strong&gt;startActivity()&lt;/strong&gt;の引数に入れて起動するらしい。&lt;/p&gt;

&lt;h3 id=&#34;startactivityとは:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;StartActivityとは&lt;/h3&gt;

&lt;p&gt;同一アプリ内の画面を呼び出すときは&lt;strong&gt;明示的Intent&lt;/strong&gt;を作成する。そして&lt;strong&gt;startActivity()&lt;/strong&gt;の引数として引き渡すことでそれを実現する。ただし、この挙動は一方通行のようなもの。呼び出し元の情報を返して欲しいときは&lt;strong&gt;startActivityForResult()&lt;/strong&gt;を使う。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;また、アクションには「&lt;strong&gt;アクティビティアクション&lt;/strong&gt;」と「&lt;strong&gt;ブロードキャストアクション&lt;/strong&gt;」があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###アクティビティアクション
&amp;gt;&lt;strong&gt;アクティビティアクション&lt;/strong&gt;とは、他のアクティビティを起動する際に、何をしたいのかを示すためのアクションです。具体的には以下のものがあります&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;アクション&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_MAIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;メインエントリーポイントとしてアクションを起動する。データを戻すことができない。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_VIEW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データをユーザに表示するためにアクションを起動する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_ATTACH_DATA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;別の場所にデータが添付されていることを示す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_EDIT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データを編集するためにアクションを起動する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_PICK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データの中からアイテムを選択するためにアクションを起動する。選択されたアイテムを受け取る。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_CHOOSER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;起動するActivityを選択するチューザーをユーザに示し、選択してもらう。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_GET_CONTENT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定した種類のデータをユーザに選択、もしくは作成してもらう。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_DIAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データで指定した番号を電話番号として設定する。データを指定しなければ、ユーザがその場で設定する。電話をかける操作はユーザに任せる。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_CALL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データで指定した人に電話をかける。データを指定しなければ、ユーザがその場で指定した番号に電話をかける。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_SEND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;別の人にデータを送信する。データの宛先は指定しない。このIntentを受け取ったアクションが、ユーザに宛先を問う。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_SENDTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データによって指定された人にメッセージを送信する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_ANSWER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;かかってきた電話に対処するアクションを起動する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_INSERT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データに含まれるURIが示すディレクトリに秋のデータを挿入する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_DELETE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データに含まれるURIが示すデータをコンテナから削除する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_RUN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データを起動する。その意味はデータの種類によって異なる。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_SYNC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;データの同期を実行する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_PICK_ACTIVITY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Intentが与えられるActivityを選択し、そのクラスを返す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_SEARCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;検索を実行する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_WEB_SEARCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WEB検索を実行する。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_FACTORY_TEST&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;デバイスが工場検査モードで起動する際にだけ実行される工場検査のメインエントリポイントとして起動する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;ブロードキャストアクション:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;ブロードキャストアクション&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;ブロードキャストアクションとは、なんらかのイベントが発生したことを他のオブジェクトに知らせる際に指定するアクションです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;アクション&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_BATTERY_CHANGED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;充電中かどうかや、電池残量が変わった時に送られる。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_BATTERY_LOW&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;電池残量が少なくなった場合に送られる。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_BOOT_COMPLETED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;システムの起動が完了したことを示す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_PACKAGE_ADDED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;新しいアプリケーションパケージがつかされたことを示す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_PACKAGE_CHANGED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;存在するアプリケーションのパケージが変更されたことを示す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_PACKAGE_REMOVED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;アプリケーションパケージを削除したことを示す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_TIMEZONE_CHANGED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;タイムゾーンが変更されたことを示す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_TIME_CHANGED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;時刻が変更されたことを示す。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_TIME_TICK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;現在時刻が変わった時に毎分送られるアクション。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ACTION_HEADSET_PLUG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ハンドセットのプラグが抜き差しされたことを示す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(参考:　&lt;a href=&#34;http://it-trick-java.appspot.com/android/c3152/page7212.html&#34;&gt;http://it-trick-java.appspot.com/android/c3152/page7212.html&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;intentに値-メッセージを乗っけて呼び出し先アクティビティに引き渡す:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;Intentに値・メッセージを乗っけて呼び出し先アクティビティに引き渡す&lt;/h2&gt;

&lt;p&gt;Activity呼び出す際に&lt;code&gt;setStart(intent)&lt;/code&gt;とするが、そのintentの中身に仕込む。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;遷移先のActivityを指定してIntentを作成し、『startActivity()』メソッドにてActivityを開始します。&lt;br /&gt;
その際、Activityを開始させる前にIntentへ値を保持させる事で、遷移先へ値を渡す事が可能です。&lt;br /&gt;
遷移先では、渡されてきた値を受け取るというよりも、起動に利用されたIntentの中にある値を取得するイメージです。&lt;br /&gt;
Intentを値の一時保管場所として、値を保持出来れば遷移先からもIntent内の値を取得する事が出来るといった考え方です。
Intentへ値を保持させるには『putExtra()』メソッドを使用しましょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(参考: &lt;a href=&#34;http://web-terminal.blogspot.jp/2013/06/android.html#How-to-receive-and-how-to-pass-a-value-to-a-transition-destination&#34;&gt;http://web-terminal.blogspot.jp/2013/06/android.html#How-to-receive-and-how-to-pass-a-value-to-a-transition-destination&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;遷移先へ値を渡す:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;遷移先へ値を渡す&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;intent.putExtra(key, val)&lt;/code&gt;でインテントに値を保持させることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 遷移先のactivityを指定してintentを作成
Intent intent = new Intent( this, MyActivity.class );
// intentにkey, valueをセット
intent.putExtra( &amp;quot;key&amp;quot;, &amp;quot;value&amp;quot; );
// 指定のActivityを開始
startActivity( intent );
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;遷移先で値を取得する:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;遷移先で値を取得する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;val = intent.getStringExtra(key)&lt;/code&gt;で保持させた値を取得することができる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 現在のintentを取得する
Intent intent = getIntent();
// intentから指定キーの文字列を取得する
String name = intent.getStringExtra( &amp;quot;key&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;getIntent()でintentを取得。
intent.getStringExtra()で指定したキーに対となる値を取得できる。&lt;/p&gt;

&lt;h5 id=&#34;型指定での取得:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;型指定での取得&lt;/h5&gt;

&lt;p&gt;今回保持していた値は&amp;rdquo;value&amp;rdquo;というString型だったため、getStringExtraとなった。
格納時の方によって呼び出し方は異なる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;取得メソッド名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;真偽値の配列（boolean[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getBooleanArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;真偽値(boolean)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getBooleanExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;バンドル(Bundle)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getBundleExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;バイト配列(byte[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getByteArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;バイト(byte)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getByteExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字配列(char[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getCharArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字(char)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getCharExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字シーケンス配列(CharSequence[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getCharSequenceArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字シーケンスの配列（ArrayList)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getCharSequenceArrayListExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字シーケンス(CharSequence)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getCharSequenceExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浮動小数点数配列(double[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getDoubleArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浮動小数点数(double)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getDoubleExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浮動小数点数配列(float[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getFloatArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;浮動小数点数(float)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getFloatExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;整数配列(int[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getIntArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;整数(int)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getIntExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;整数オブジェクトの配列(ArrayList)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getIntegerArrayListExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;整数配列(long[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getLongArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;整数(long)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getLongExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;オブジェクトの一時的保管領域配列(Parcelable[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getParcelableArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;オブジェクトの一時的保管領域配列( ArrayList)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getParcelableArrayListExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;オブジェクトの一時的保管領域( T)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getParcelableExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;シリアライズ(Serializable)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getSerializableExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;整数配列(short[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getShortArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;整数(short)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getShortExtra( &amp;ldquo;キー&amp;rdquo; , デフォルト値 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字列配列(String[])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getStringArrayExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字列配列(ArrayList)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getStringArrayListExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;文字列(String)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getStringExtra( &amp;ldquo;キー&amp;rdquo; )&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;全て添え字指定にて値を識別し、取得しますが
該当する添え字が無い場合、基本的にはnullが返却されます。
上記一覧内のメソッドの中には、第二引数にデフォルト値を指定出来るものがあり、
そのようなメソッドでは、キーに該当するものが無い場合はデフォルト値が返却されます。
もちろん、第二引数に指定するデフォルト値も、メソッドに該当する型である必要があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(参考: &lt;a href=&#34;http://web-terminal.blogspot.jp/2013/06/android.html&#34;&gt;http://web-terminal.blogspot.jp/2013/06/android.html&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;遷移先でセットした値を遷移元で受け取る:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;遷移先でセットした値を遷移元で受け取る&lt;/h2&gt;

&lt;p&gt;今度は遷移元への値の戻し方。&lt;/p&gt;

&lt;h3 id=&#34;遷移元での事前準備:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;遷移元での事前準備&lt;/h3&gt;

&lt;p&gt;Activityはfinish()で終了を行うことができる
前述の通り、呼び出し時にstartActivityForResult()を宣言した時のみ呼び出し元に呼び出し先の結果を戻す事が可能となる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 遷移先のactivityを指定してintentを作成
Intent intent = new Intent( this, MyActivity.class );
// 遷移先から返却されてくる際の識別コード
int requestCode = 1001;
// 返却値を考慮したActivityの起動を行う
startActivityForResult( intent, requestCode );
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;遷移元で値を受け取るメソッド:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;遷移元で値を受け取るメソッド&lt;/h3&gt;

&lt;p&gt;遷移先のアクティビティが破棄されたイベントをトリガーに発火する onActivityResult() をコールバックで実装する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void onActivityResult( int requestCode, int resultCode, Intent intent )
{
 // startActivityForResult()の際に指定した識別コードとの比較
 if( requestCode == 1001 ){

  // 返却結果ステータスとの比較
  if( resultCode == Activity.RESULT_OK ){

   // 返却されてきたintentから値を取り出す
   String str = intent.getStringExtra( &amp;quot;key&amp;quot; );
  }
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記をチェックしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requestCodeが最初にセットした値通りか。&lt;/li&gt;
&lt;li&gt;返却結果ステータスがOKか（またはキャンセルか、などなど）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらが正しければ、getStringExtra()を使って文字列を取得する。&lt;/p&gt;

&lt;h3 id=&#34;遷移先での遷移元に戻す値のセット:c2c063becef589ed6b639d4c6569fd2e&#34;&gt;遷移先での遷移元に戻す値のセット&lt;/h3&gt;

&lt;p&gt;finish();した時にどんな値を遷移元に戻すか
    // intentの作成
    Intent intent = new Intent();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// intentへ値を保持させる
intent.putExtra( &amp;quot;key&amp;quot;, &amp;quot;result_val&amp;quot; );

// 戻したい結果ステータスをセットする
setResult( Activity.RESULT_OK, intent );

// アクティビティを終了させる
finish();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;new Intent&lt;/code&gt;して、&lt;code&gt;putExtra(key,val)&lt;/code&gt;で値を保持して、うまく行ったかどうかのステータスを&lt;code&gt;setResult()&lt;/code&gt;でセットする。そして、&lt;code&gt;finish()&lt;/code&gt;する、という流れ。
遷移先に値を引き渡すのと同様、&lt;code&gt;putExtra(key,val)&lt;/code&gt;を使っている。&lt;/p&gt;

&lt;p&gt;setResultでRESULT_OKをセットしているので、これで呼び出し元で正しく受け取れる。
独自でハンドルするときはここは独自定数で変更できそう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>