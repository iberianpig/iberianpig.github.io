<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on iberianpigsty</title>
    <link>https://iberianpig.github.io/categories/javascript/</link>
    <description>Recent content in Javascript on iberianpigsty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (c) 2014 - 2016, iberianpigsty; all rights reserved.</copyright>
    <lastBuildDate>Mon, 13 Apr 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://iberianpig.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AngularでのDOMへのアクセス</title>
      <link>https://iberianpig.github.io/posts/2015-04-13-angular%E3%81%A7%E3%81%AEdom%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2015-04-13-angular%E3%81%A7%E3%81%AEdom%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</guid>
      <description>AngularがDOMのdata-x属性の値を取得する必要があったのでメモ。
今回はdata-x属性内のハッシュ構造のデータを取り出す必要があった。
&amp;lt;SELECTOR data-x = &#39;{&amp;quot;id&amp;quot;:&amp;quot;123&amp;quot;, &amp;quot;name&amp;quot;:&amp;quot;hoge&amp;quot;}&#39;...&amp;gt;というDOM要素が存在した時
str = angular.element(&#39;SELECTOR&#39;).attr(&#39;data-x&#39;)のような形式でデータを取得することができる。
しかしこの状態ではstrはただの文字列として取得した状態なので、ハッシュを取り出すにはパースしてあげる必要がある。
hashed_data = angular.fomJson(str)
これでhashed_data = {&amp;quot;id&amp;quot;:&amp;quot;123&amp;quot;, &amp;quot;name&amp;quot;:&amp;quot;hoge&amp;quot;}が取得できる。</description>
    </item>
    
    <item>
      <title>ng-japan</title>
      <link>https://iberianpig.github.io/posts/2015-03-21-ng-japan/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://iberianpig.github.io/posts/2015-03-21-ng-japan/</guid>
      <description>Angualrjsの日本初のカンファレンスng-japan2015 が渋谷で2015/03/21にあったので行って来た。
場所はサイバーエージェント。以前参加した勉強会もここでやってた気がする。
毎度の通り、最初の1個目のセッションはあんまり聞けなかった。
結構人がいて定員500名の会場が普通に埋まってた
こんなかんじ↓
すごい人！ ng-japan venue is packed! #ng_jp pic.twitter.com/Cb1Zfn9Q63
&amp;mdash; Eiji Kitamura (@agektmr) 2015, 3月 21 
今回アシアルの田中さんのセッションが個人的に面白かったのでそちらにフォーカスして書いています。
onsen-uiのはなし AngularとOnsen UIで作る最高のHTML5ハイブリッドアプリ 
HTML5ハイブリッドアプリとは ネイティブのアプリとは違って、View部分をHTMLで記述。 ネイティブ層、HTML5層があって内部はHTML5で作っている。
アプリ内ではWebviewを利用している。
###メリット * クロスプラットフォーム性 * ネイティブ機能をJsから呼び出し * ハイブリッド用のCordovaから呼び出し * OSからのAPI呼び出しを一本化する
###色々メリットはあるがしかし… * ハイブリッドアプリは作ってみたものの&amp;hellip; * Facebookでザッカーバーグの発言。&amp;ldquo;HTML5にかけたのは失敗&amp;rdquo;
###しかし状況は変わってきた * モバイルの高速化 * CrossWalkだったり、ChromiumがWebviewに使われたり。 * DHH（Rails作者）によるハイブリッドアプリに関する好評
###デメリット * UIコンポーネントが標準で持っていない * チューニングの方法が難しい
##チューニングの方法 * インスペクタのTimelineタブで計測 * AndroidではChrome・iOSではsafariのinspecter * タイムラインタブのカテゴリの説明（図） * 描画が始まって16ms以下に抑えると60fps以上出る * 逆にそれ以上だしてもディスプレイが追いつかない
チューニング対象となる5つのフェーズ  Loading  リソースの読み込みやパース 組み込みなのであんまやることない  Scripting  JavaScriptの実行時間。純粋な計算は基本的に問題なし。 リフロー、Canvasへの命令など時間はかかる ProfileTabで簡単にわかる  Rendering  レイアウト処理 再計算(Recaluculate Style) CSS OMを参照してDOM*CSSルールの数分マッチング処理が走る。 使ってないCSSのルールマッチングの文だけ遅くなる 重たいCSSのセレクタの書き方 子孫セレクタやめたほうがいい クラスで指定する書き方が速い 使ってないCSSのルールは消す。  Layout  すべてのDOMのレイアウト情報を計算 計算された結果の視野的なオブジェクトのツリーがレンダリングツリー  Painting  描画処理 DisplayListの生成 Rasterize ピクセル化 CompositeLayeers レイヤの合成   雑多なチューニングの小話  translate3d(0,0,0)が早いのはなぜ？  GPUで描画されるから?</description>
    </item>
    
  </channel>
</rss>