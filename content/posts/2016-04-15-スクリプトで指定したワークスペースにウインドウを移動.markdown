---
layout: post
title: "特定のアプリケーションにスイッチするシェルスクリプトを作る"
published: true
date: 2016-04-15
comments: true
tags: 
categories: linux
image: https://pixabay.com/static/uploads/photo/2013/07/13/13/41/bash-161382_960_720.png
---

# ブラウザとターミナルを交互に切り替えたい

Web開発している時にターミナルとChromeを行ったり来たりすることがある。
Alt-tabもあるけれど、他のウィンドウが邪魔で1回Alt+tab打つのか2回やるのかわからない。

特定のキー1回ででブラウザとターミナルをトグルできればベスト。

## xdotoolを使ってみる

できる事は下記があるらしい。

> * ウィンドウ ID の取得
>   * 名前やクラスによる検索
>   * 現在アクテイブなウィンドウ
> * ウィンドウ ID で指定されたウィンドウの操作
>   * リサイズ
>   * 移動
>   * 最小化
>   * 最全面へ
> * マウスイベントの模倣
>   * マウスカーソル移動
>   * マウスクリック
> * キーイベントの模倣
>   * 文字入力
>   * ショートカットキー入力

NOTE: xdotoolを使い特定ウィンドウの表示をワンキーでトグル(http://d.hatena.ne.jp/mooz/20101228/p)

<!-- more -->

```bash
$xdotool
Usage: xdotool <cmd> <args>
Available commands:
  getwindowfocus
  getwindowname
  getwindowpid
  getwindowgeometry
  getdisplaygeometry
  search
  selectwindow
  help
  version
  behave
  behave_screen_edge
  click
  getmouselocation
  key
  keydown
  keyup
  mousedown
  mousemove
  mousemove_relative
  mouseup
  set_window
  type
  windowactivate
  windowfocus
  windowkill
  windowmap
  windowminimize
  windowmove
  windowraise
  windowreparent
  windowsize
  windowunmap
  set_num_desktops
  get_num_desktops
  set_desktop
  get_desktop
  set_desktop_for_window
  get_desktop_for_window
  get_desktop_viewport
  set_desktop_viewport
  exec
  sleep
```
結構いろいろある


## windowIDの取得

対象アプリケーションのWindowのIDを取得

```
$ xdotool search "byobu"
Defaulting to search window name, class, and classname
65011722
```


## workspaceIDの取得

対象のアプリケーションがどこのワークスペースにいるかを取得

```
xdotool get_desktop_for_window 65011722
0
```

## windowをworkspaceへのセット

WindowIDが`65011722`のWindowをWorkspace`1`に移動させる

```
xdotool set_desktop_for_window 65011722 1
```

## 実装してみる

{{< gist iberianpig 38a7dfe61b5dc59de7f855330b7c6ab4 >}}

xdotoolで現在のWindowを見て、ブラウザであればターミナルを、そうでなければブラウザをアクティブにする。

xbindkeysを使ってショートカットをアサイン
xbindkeys使ってなければインストールから。
```
sudo apt-get install xbindkeys
```

~/.xbindkeysrcを修正する
```
"/path/to/your/script/relocate_wondow.sh"
   Control+Shift + m
```

xbindkeysを再起動

```sh
pkill xbindkeys
xbindkeys
```

Ctrl+Shift+mでターミナルとブラウザをトグルできるようなった！

# その他xdotoolでやりたいこと
他にもxdotoolでやりたいことがいくつかある。

## いつも指定のワークスペースにアプリをセットしたい


作業を始めるときいつも同じ配置にする。

```
browser | terminal | twitter/slack | calendar/todo list
```

上記の配置をすることが多い。アプリ開いて、ワークスペース移動して、アプリ開いて…。
面倒であるので一発でワークスペースに配置したい。

## 現在のアプリをひとつずつ隣のワークスペースに移動させたい

そもそもなぜこのような要望が出るかというと今のelementary OSのバグで、マルチモニタを接続した際にプライマリのワークスペースが大きく描画されてしまう謎挙動がある。
その状態でアプリケーションをドラッグで移動しようとしてもプライマリのワークスペースが隣のワークスペースの領域にかぶっていて、移動が困難になる。

対処策として、一度`Super+Shift+Left`でアプリケーションを再配置してしまえばよいが、ひとつずつしかワークスペースに移動させることができない。
これがとても面倒だったため、スクリプト一発で再配置できるようにしたい。

